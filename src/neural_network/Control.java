package neural_network;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Control {
	private int state;
	private Classifier binary;
	private MultiClassifier multi;
	
	public Control() {
		this.state = 0; //create an enum??
	}

	public void run() {
		System.out.println("Enter next command. (type \"help\" to see list of available actions)");
		while(true) {
			Scanner sc = new Scanner(System.in);
			String[] input = sc.nextLine().toLowerCase().split(" ");
			String return_statement = "";
			if(state == 0) {
				switch (input[0]) {
				case "load":	
					
					break;
				case "create":
					return_statement =	CreateNN(input);
					break;
			}
			}else if(state == 1) {
				switch (input[0]) {
				case "load":					
					break;
				case "create":
					return_statement = CreateNN(input);
					break;
				case "changeparams":
					break;
				case "classify":
					return_statement = classify(input);
					break;
				case "train":
					break;
				case "test":
					break;
			}
				
			}
			System.out.println(return_statement);
		}
		
	}

	
	/**
	 * Creates a new NN from params given by the user to the command line. Weights and biases are
	 * randomised values generated by the program. 
	 * input should look something like: "create 2,3,4,2"
	 * @return
	 */
	public String CreateNN(String[] input) {
		
		String[] params = input[1].split(",");
		int len = params.length;
		int[] architecture = new int[len];
		for(int i =0; i < len; i++) {
			architecture[i] = Integer.parseInt(params[i]);
		}
		
		if(architecture[len-1] == 1 ) {
			this.binary = new Classifier(architecture);
		}else {
			this.multi = new MultiClassifier(architecture);
		}
		//should get the result of creation returned here, then can return fail msg too. 
		return "Network successfully created";
	}
	/**
	 * Reading an entire NN from a file including weight anad bias values. 
	 * 
	 * @param input
	 * @return
	 */
	public String loadNN(String[] input) {
		File f = new File(input[1]);
		//Classifier params : array of ints [3,4,5] values are numbr of nodes for each layer
		//input should look something like: "create 2 3 2 3 or create 2,3,4,2
		return "";
	}
	

	
	public String changeparams(String input) {
		
		return "";
	}

	public String classify(String[] input) {
		
		DataParser dp = new DataParser();
		Set<double[]> instances = dp.readUnsupervisedFile(input[1], Integer.parseInt(input[2]));
		double[][] results = new double[instances.size()][];
		int i =0;
		for(double[] instance: instances) {
			results[i] = multi.classify(instance);
			i++;
		}
		
		String return_statement = "";
		for(double[] instance : results) {
			return_statement += "\n"+Arrays.toString(instance);
		}
		return "Results: \n"+return_statement;
	}
	
	public String trainNN(String input) {
		
		return "";
	}
	
	public String testNN(String input) {
		
		return "";
	}
	
	/***
	 * Prints out glossary of commands to the console to help users 
	 * see functionality. 
	 * @return
	 */
	public String help() {
		return "";
	}
	
	
	
	
	public static void main(String[] args) throws FileNotFoundException {
		DataParser dt = new DataParser();
		Map<double[], double[]> instances = dt.readSupervisedFile("C:\\Users\\Ashton\\eclipse-workspace\\NNImageClassifier\\src\\data\\iris.data.txt", 4, 3);
		int[] architecture = new int[]{4,3,3};
		
		MultiClassifier NN = new MultiClassifier(architecture);
		
		double[] test_inst = new double[]{5.9,3.0,5.1,1.8,1,0,0}; 
		double [] result_a = NN.classify(test_inst);
		
		for(int epoch = 0; epoch < 100; epoch++) {
			for(double[] instance : instances.keySet()) {
				NN.train(instance, instances.get(instance));
			}
		}
		
		double[] result_b = NN.classify(test_inst);
		System.out.println("before training: "+Arrays.toString(result_a));
		System.out.println("after training: "+Arrays.toString(result_b));
		
		
		Control c = new Control();
		c.state = 1;
		c.multi = NN;
		c.run();
	}
	
	
	

}
